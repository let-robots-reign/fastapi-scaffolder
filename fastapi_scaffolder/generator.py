from datetime import datetime, timezone
from pathlib import Path
from typing import Optional, List, Dict

from datamodel_code_generator import PythonVersion, chdir
from datamodel_code_generator.format import CodeFormatter
from jinja2 import Environment, FileSystemLoader

from fastapi_scaffolder.consts import MODEL_PATH, BUILTIN_TEMPLATE_DIR, BUILTIN_VISITOR_DIR
from fastapi_scaffolder.parser import OpenAPIParser
from fastapi_scaffolder.utils.load_module import dynamic_load_module
from fastapi_scaffolder.visitor import Visitor


class BackendGenerator:
    def __init__(
        self,
        input_name: str,
        input_text: str,
        output_dir: Path,
        template_dir: Optional[Path],
        model_path: Optional[Path] = None,
        enum_field_as_literal: Optional[str] = None,
        custom_visitors: Optional[List[Path]] = None,
    ):
        self.input_name = input_name
        self.input_text = input_text
        self.output_dir = output_dir
        self.template_dir = template_dir or BUILTIN_TEMPLATE_DIR
        self.model_path = model_path or MODEL_PATH
        self.enum_field_as_literal = enum_field_as_literal
        self.custom_visitors = custom_visitors
        self.parser = None

    def generate_code(self):
        if not self.output_dir.exists():
            self.output_dir.mkdir(parents=True)
        self.generate_models()
        if not self.parser:
            return
        self.generate_controllers()
        self.generate_api()

    def generate_models(self):
        self.parser = OpenAPIParser(self.input_text, enum_field_as_literal=self.enum_field_as_literal or None)
        with chdir(self.output_dir):
            models = self.parser.parse()
        if not models:
            return
        elif isinstance(models, str):
            output = self.output_dir / self.model_path
            modules = {output: (models, self.input_name)}
        else:
            raise Exception('Modular references are not supported in this version')

        timestamp = datetime.now(timezone.utc).replace(microsecond=0).isoformat()
        header = f'''\
#   models file generated by fastapi-scaffolder:
#   filename:  {{filename}}
#   timestamp: {timestamp}'''

        for path, body_and_filename in modules.items():
            body, filename = body_and_filename
            if path is None:
                file = None
            else:
                if not path.parent.exists():
                    path.parent.mkdir(parents=True)
                file = path.open('wt', encoding='utf8')

            print(header.format(filename=filename), file=file)
            if body:
                print('', file=file)
                print(body.rstrip(), file=file)

            if file is not None:
                file.close()

    def generate_controllers(self):
        pass

    def generate_api(self):
        environment: Environment = Environment(
            loader=FileSystemLoader(
                self.template_dir or f"{Path(__file__).parent}/template",
                encoding="utf8",
            ),
        )

        results: Dict[Path, str] = {}
        code_formatter = CodeFormatter(PythonVersion.PY_38, Path().resolve())

        # vars in key-value format
        # keys are used in template, values are injected by template.render
        # initially adding info section from openapi file
        template_vars: Dict[str, object] = {"info": self.parser.parse_info()}
        visitors: List[Visitor] = []

        # load visitors
        builtin_visitors = BUILTIN_VISITOR_DIR.rglob("*.py")
        visitors_path = [*builtin_visitors, *(self.custom_visitors if self.custom_visitors else [])]
        for visitor_path in visitors_path:
            module = dynamic_load_module(visitor_path)
            if hasattr(module, "visit"):
                visitors.append(module.visit)
            else:
                raise Exception(f"{visitor_path.stem} does not have any visit function")

        # Call visitors to build template_vars
        for visitor in visitors:
            visitor_result = visitor(self.parser, self.model_path)
            template_vars = {**template_vars, **visitor_result}

        for target in self.template_dir.rglob("*"):
            relative_path = target.relative_to(self.template_dir)
            template = environment.get_template(str(relative_path))
            result = template.render(template_vars)
            results[relative_path] = code_formatter.format_code(result)

        timestamp = datetime.now(timezone.utc).replace(microsecond=0).isoformat()
        header = f"""\
#   API file generated by fastapi-scaffolder:
#   filename:  {Path(self.input_name).name}
#   timestamp: {timestamp}"""

        for path, code in results.items():
            with self.output_dir.joinpath(path.with_suffix(".py")).open("wt") as file:
                print(header, file=file)
                print("", file=file)
                print(code.rstrip(), file=file)
