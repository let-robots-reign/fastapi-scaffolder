<template>
  <a-layout class="main-layout table-layout">
    <base-section with-padding>
      <a-row
        type="flex"
        justify="space-between"
        align="middle"
        :style="{ marginBottom: '40px' }"
      >
        <a-col :xs="13" :offset="2">
          <h1 class="heading">Список элементов модели Pet</h1>
        </a-col>
        <a-col :xs="4" :style="{ textAlign: 'right' }">
          <base-button
            v-show="selectedRows.length > 0"
            size="large"
            danger
            @click="confirmModalOpened = true"
          >
            Удалить элементы
          </base-button>
        </a-col>
        <a-col :xs="4">
          <base-button size="large" @click="createNewItem">Создать элемент</base-button>
        </a-col>
      </a-row>
      <a-row type="flex" justify="center">
        <a-col :xs="20">
          <base-table
            :data="data"
            :columns="columns"
            :total="total"
            :selected-rows="selectedRows"
            @row-checked-change="toggleSelectRow"
          >
            <template #id="{ item }">
              <router-link
                :to="{ name: '{{modelName}} Item', params: { id: item.id } }"
              >
                \{{ item.id }}
              </router-link>
            </template>
          </base-table>
        </a-col>
      </a-row>
    </base-section>
  </a-layout>
  <base-modal
    :visible="confirmModalOpened"
    @close="closeConfirmModal"
  >
    <template #header>
      <h2 class="modal-heading">Подтвердите действие</h2>
    </template>
    <div class="modal-body">
      <p class="confirm-text">
        Действительно удалить \{{ selectedRows.length }} элементов
      </p>
      <div class="modal-buttons">
        <base-button size="large" @click="confirmDelete">
          ДА
        </base-button>
        <base-button size="large" type="secondary" @click="closeConfirmModal">
          НЕТ
        </base-button>
      </div>
    </div>
  </base-modal>
</template>

<script lang="ts">
import { Component } from "vue-facing-decorator";
import BaseTable from "@/components/BaseTable.vue";
import BaseSection from "@/components/BaseSection.vue";
import BaseButton from "@/components/BaseButton.vue";
import BaseModal from "@/components/BaseModal.vue";
import BaseModelTable from "@/components/BaseModelTable.vue";
// import api from "@/api/api";

@Component({
  components: { BaseButton, BaseSection, BaseTable, BaseModal }
})
export default class {{capitalize modelName}}Table extends BaseModelTable {
  modelName = "{{capitalize modelName}}";

  async getDataList() {
    try {
      // const res = await api.admin.list(this.modelName);
      // this.data = res.data;
      this.data = [
        {
          id: 1,
          name: "Roach",
          animal: "Horse",
          age: 8,
          color: "black",
          doctor: "Mr. Smith",
          owner: "Mr. Green",
        },
        {
          id: 2,
          name: "Jack",
          animal: "Dog",
          age: 8,
          color: "brown",
          doctor: "Mrs. Finch",
          owner: "Mr. Tyler",
        },
      ];
      this.total = this.data.length;
      this.columns = this.getColumnsFromData();
    } catch (e) {
      console.log(`Error getting list of ${this.modelName}:`, e);
    }
  }

  createNewItem() {
    this.router.push({ name: "Create Model Item", params: { modelName: this.modelName }});
  }

  created() {
    this.getDataList();
  }

  confirmDelete() {
    // TODO: delete many
    this.selectedRows.splice(0);
    this.closeConfirmModal();
  }
}
</script>

<style lang="scss" scoped>
.table-layout {
  padding-top: 50px;
}

.heading {
  margin: 0;
}

.modal-heading {
  margin: 0;
  font-size: 32px;
  font-family: "Roboto", sans-serif;
  font-weight: 600;
}

.confirm-text {
  font-size: 18px;
  font-family: "Roboto", sans-serif;
  margin-bottom: 32px;
}

.modal-buttons {
  display: flex;
  justify-content: end;
  column-gap: 12px;
}
</style>