import os
from datetime import datetime

import pytest

from fastapi_scaffolder.consts import BUILTIN_TEMPLATE_DIR, MODEL_PATH
from fastapi_scaffolder.generator import BackendGenerator


@pytest.fixture
def output_dir(tmp_path):
    return tmp_path / "output"


@pytest.fixture
def template_dir():
    return BUILTIN_TEMPLATE_DIR


@pytest.fixture
def model_path():
    return MODEL_PATH


@pytest.fixture
def custom_visitors():
    return []


@pytest.fixture
def backend_generator(input_name, input_text, output_dir, template_dir, model_path, custom_visitors):
    return BackendGenerator(
        input_name=input_name,
        input_text=input_text,
        output_dir=output_dir,
        template_dir=template_dir,
        model_path=model_path,
        custom_visitors=custom_visitors,
    )


@pytest.fixture
def input_name():
    return "example.yaml"


@pytest.fixture
def input_text():
    return """
openapi: "3.0.0"
info:
  title: Sample API
  version: 1.0.0
paths:
  /users:
    get:
      summary: Get users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
"""


def test_generate_code(backend_generator, output_dir):
    backend_generator.generate_code()
    assert output_dir.exists()


def test_generate_models(backend_generator, output_dir):
    backend_generator.generate_models()
    assert (output_dir / MODEL_PATH).exists()


def test_generate_templates(backend_generator, output_dir):
    backend_generator.generate_templates()
    assert (output_dir / "users.py").exists()


def test_generate_templates_with_custom_visitors(backend_generator, output_dir, custom_visitors):
    backend_generator.generate_templates(custom_visitors)
    assert (output_dir / "custom_template.py").exists()


def test_generated_files_have_timestamp(backend_generator, output_dir):
    backend_generator.generate_code()
    timestamp = datetime.now().replace(microsecond=0).isoformat()

    for root, dirs, files in os.walk(output_dir):
        for file in files:
            with open(os.path.join(root, file), "r") as f:
                contents = f.read()
                assert timestamp in contents


def test_generated_model_contains_expected_content(backend_generator, output_dir):
    backend_generator.generate_code()
    expected_content = """
#   models file generated by fastapi-scaffolder:
#   filename:  User
#   timestamp: """

    with open(output_dir / MODEL_PATH, "r") as f:
        contents = f.read()
        assert expected_content in contents


def test_generated_template_contains_expected_content(backend_generator, output_dir):
    backend_generator.generate_code()
    expected_content = """
#   file generated by fastapi-scaffolder:
#   filename:  users.py
#   timestamp: """

    with open(output_dir / "users.py", "r") as f:
        contents = f.read()
        assert expected_content in contents


def test_generated_custom_template_contains_expected_content(
    backend_generator, output_dir, custom_visitors
):
    backend_generator.generate_code()
    expected_content = """
#   file generated by fastapi-scaffolder:
#   filename:  custom_template.py
#   timestamp: """

    with open(output_dir / "custom_template.py", "r") as f:
        contents = f.read()
        assert expected_content in contents


def test_generated_custom_visitors_raise_exception_if_no_visit_function_defined(
    backend_generator, output_dir
):
    invalid_visitor_path = output_dir / "invalid_visitor.py"
    invalid_visitor_path.write_text("def some_function(): pass")

    backend_generator.custom_visitors = [invalid_visitor_path]
    with pytest.raises(Exception) as e:
        backend_generator.generate_code()

    assert "invalid_visitor does not have any visit function" in str(e.value)


def test_generated_models_file_contains_expected_content(backend_generator, output_dir, input_name):
    backend_generator.generate_code()
    expected_content = f"""
#   models file generated by fastapi-scaffolder:
#   filename:  {input_name}
#   timestamp: """

    with open(output_dir / MODEL_PATH, "r") as f:
        contents = f.read()
        assert expected_content in contents


def test_generated_models_file_content_is_correct(backend_generator, output_dir, input_text):
    backend_generator.generate_code()
    expected_code = '''
from __future__ import annotations

from enum import Enum
from typing import List, Optional

from sqlmodel import SQLModel, Field


class User(SQLModel):
    id: int
    name: str
    surname: Optional[str] = None
    age: Optional[int] = None
    email: Optional[str] = None
    address: str


class Breed(Enum):
    labrador = 'labrador'
    husky = 'husky'
    bulldog = 'bulldog'


class Pet(SQLModel):
    id: int
    name: str
    tag: Optional[str] = None
    breed: Optional[Breed] = None
    vaccinated: Optional[bool] = False
    comment: Optional[str] = None


class Pets(SQLModel):
    __root__: List[Pet] = Field(..., description='list of pet')


class Error(SQLModel):
    code: int
    message: str
'''

    with open(output_dir / MODEL_PATH, "r") as f:
        contents = f.read()
        assert expected_code.strip() == contents.strip()
